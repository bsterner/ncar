# Dumb multi-machine way
# Vagrant.configure("2") do |config|
#   config.vm.define "master" do |subconfig|
#     subconfig.vm.box = "centos/7"
#   end
#
#   config.vm.define "node1" do |subconfig|
#     subconfig.vm.box = "centos/7"
#   end
#
#   config.vm.define "node2" do |subconfig|
#     subconfig.vm.box = "centos/7"
#   end
# end

BOX_IMAGE = "centos/7"
NODE_COUNT = 1

Vagrant.configure("2") do |config|
  config.vm.define "master" do |subconfig|
    subconfig.vm.box = BOX_IMAGE
    subconfig.vm.hostname = "master"
    subconfig.vm.network :private_network, ip: "10.0.0.10"
  end

  (1..NODE_COUNT).each do |i|
     config.vm.define "node#{i}" do |subconfig|
       subconfig.vm.box = BOX_IMAGE
       subconfig.vm.hostname = "node#{i}"
       subconfig.vm.network :private_network, ip: "10.0.0.#{i + 10}"
     end
  end

  # Install avahi on all machines
  config.vm.provision "shell", inline: <<-SHELL
    rpm -ivh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm
    yum install -y avahi nss-mdns
  SHELL
end

# # -*- mode: ruby -*-
# # vi: set ft=ruby :
#
# # All Vagrant configuration is done below. The "2" in Vagrant.configure
# # configures the configuration version (we support older styles for
# # backwards compatibility). Please don't change it unless you know what
# # you're doing.
# Vagrant.configure("2") do |config|
#   # The most common configuration options are documented and commented below.
#   # For a complete reference, please see the online documentation at
#   # https://docs.vagrantup.com.
#
#   # Every Vagrant development environment requires a box. You can search for
#   # boxes at https://atlas.hashicorp.com/search.
#   config.vm.box = "centos/7"
#
#   # Disable automatic box update checking. If you disable this, then
#   # boxes will only be checked for updates when the user runs
#   # `vagrant box outdated`. This is not recommended.
#   # config.vm.box_check_update = false
#
#   # Create a forwarded port mapping which allows access to a specific port
#   # within the machine from a port on the host machine. In the example below,
#   # accessing "localhost:8080" will access port 80 on the guest machine.
#   # config.vm.network "forwarded_port", guest: 80, host: 8080
#
#   # Added per google doc instructions
#   # https://docs.google.com/document/d/1dtjfDfsSWuYqiKmAmQJ42HK-VcwuQK6nCgSXQReIO8Q/edit
#   #
#   # config.vm.network "forwarded_port", guest: 53306, host: 53306
#   # config.vm.network "forwarded_port", guest: 8080, host: 28080
#   # config.vm.network "forwarded_port", guest: 22, host: 1222
#   # config.ssh.username = "bsterner"
#   # # - This sets the username that Vagrant will SSH as by default. Providers are free to override this if they detect a more appropriate user. By default this is "vagrant," since that is what most public boxes are made as.
#   # config.ssh.password = "vagrant"
#   # - This sets a password that Vagrant will use to authenticate the SSH user. Note that Vagrant recommends you use key-based authentication rather than a password (see private_key_path) below. If you use a password, Vagrant will automatically insert a keypair if insert_key is true.
#   # config.ssh.host
#   # - The hostname or IP to SSH into. By default this is empty, because the provider usually figures this out for you.
#   # config.ssh.port = 4222
#   # - The port to SSH into. By default this is port 22.
#   # config.ssh.guest_port = 33
#   # - The port on the guest that SSH is running on. This is used by some providers to detect forwarded ports for SSH.
#   # For example, if this is set to 22 (the default), and Vagrant detects a forwarded port to port 22 on the guest from port 4567 on the host,
#   # Vagrant will attempt to use port 4567 to talk to the guest if there is no other option.
#   # config.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", disabled: true
#   # config.vm.network :forwarded_port, guest: 22, host: 2230, auto_correct: true
#   # config.vm.network :private_network, ip: '192.168.115.12'
#   config.vm.network :forwarded_port, guest: 22, host: 2230, id: 'ssh'
#
#   config.vm.provider "virtualbox" do |vb|
#     # Display the VirtualBox GUI when booting the machine
#     # vb.gui = true
#
#     # Customize the amount of memory on the VM:
#     # vb.memory = "1024"
#     vb.memory = "1024"
#     vb.name = "swarm-00"
#   end
#
#   # Create a private network, which allows host-only access to the machine
#   # using a specific IP.
#   # config.vm.network "private_network", ip: "192.168.33.10"
#
#   # Create a public network, which generally matched to bridged network.
#   # Bridged networks make the machine appear as another physical device on
#   # your network.
#   # config.vm.network "public_network"
#
#   # Share an additional folder to the guest VM. The first argument is
#   # the path on the host to the actual folder. The second argument is
#   # the path on the guest to mount the folder. And the optional third
#   # argument is a set of non-required options.
#   # config.vm.synced_folder "../data", "/vagrant_data"
#
#   # Provider-specific configuration so you can fine-tune various
#   # backing providers for Vagrant. These expose provider-specific options.
#   # Example for VirtualBox:
#   #
#   # config.vm.provider "virtualbox" do |vb|
#   #   # Display the VirtualBox GUI when booting the machine
#   #   vb.gui = true
#   #
#   #   # Customize the amount of memory on the VM:
#   #   vb.memory = "1024"
#   # end
#   #
#   # View the documentation for the provider you are using for more
#   # information on available options.
#
#   # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
#   # such as FTP and Heroku are also available. See the documentation at
#   # https://docs.vagrantup.com/v2/push/atlas.html for more information.
#   # config.push.define "atlas" do |push|
#   #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
#   # end
#
#   # Enable provisioning with a shell script. Additional provisioners such as
#   # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
#   # documentation for more information about their specific syntax and use.
#   # config.vm.provision "shell", inline: <<-SHELL
#   #   apt-get update
#   #   apt-get install -y apache2
#   # SHELL
# end
